version: '3.8'

services:
  rag-streamlit:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: rag-streamlit-app
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - PYTHONPATH=/app
      - HF_HOME=/app/models/.cache
      - TRANSFORMERS_CACHE=/app/models/.cache
      - TORCH_HOME=/app/models/.cache
    volumes:
      - rag_data:/app/data
      - rag_models:/app/models
      - rag_cache:/app/models/.cache
    command: ["python", "-m", "streamlit", "run", "st_app.py", "--server.port=8501", "--server.address=0.0.0.0", "--server.headless=true"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - rag-network
    depends_on:
      rag-api:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  rag-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: rag-rest-api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - PORT=5000
      - PYTHONPATH=/app
      - HF_HOME=/app/models/.cache
      - TRANSFORMERS_CACHE=/app/models/.cache
      - TORCH_HOME=/app/models/.cache
    volumes:
      - rag_data:/app/data
      - rag_models:/app/models
      - rag_cache:/app/models/.cache
    command: ["python", "FLASK_REST_API.py"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - rag-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

volumes:
  rag_data:
    driver: local
  rag_models:
    driver: local
  rag_cache:
    driver: local

networks:
  rag-network:
    driver: bridge